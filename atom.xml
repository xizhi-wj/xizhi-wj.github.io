<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曦凪</title>
  
  <subtitle>code beauty the wolrd</subtitle>
  <link href="https://xi-zhi.xyz/atom.xml" rel="self"/>
  
  <link href="https://xi-zhi.xyz/"/>
  <updated>2023-05-30T03:56:42.998Z</updated>
  <id>https://xi-zhi.xyz/</id>
  
  <author>
    <name>曦凪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器环境和node环境的区别</title>
    <link href="https://xi-zhi.xyz/posts/bd1d8f32.html"/>
    <id>https://xi-zhi.xyz/posts/bd1d8f32.html</id>
    <published>2023-05-30T03:56:42.998Z</published>
    <updated>2023-05-30T03:56:42.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区别一"><a href="#区别一" class="headerlink" title="区别一"></a>区别一</h3><blockquote><p>二者的方向不同，浏览器环境主要是用于客户端，node 环境主要是用于服务端(后端)</p></blockquote><h3 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h3><blockquote><p>浏览器环境不需要下载任何东西只需要一个 html 文件，node 环境需要下载 node.js,同时浏览器环境是直接在浏览器执行 js 代码，node 环境是在服务端执行 js 代码</p></blockquote><h3 id="区别三"><a href="#区别三" class="headerlink" title="区别三"></a>区别三</h3><blockquote><p>浏览器提供了一系列与浏览器交互的 API，如 DOM 操作，Ajax 请求、浏览器事件等，而 Node.js 环境提供了一系列与服务器端开发相关的 API，如文件系统操作、网络通信、模块管理等</p></blockquote><h3 id="区别四"><a href="#区别四" class="headerlink" title="区别四"></a>区别四</h3><blockquote><p>在模块系统方面，浏览器环境中通常使用 script 标签引入外部 JavaScript 文件。而在 Node.js 环境中，使用CommonJS 或 ES Modules（从 Node.js 13 版本开始支持）进行模块管理，可以使用 require 或 import 来引入其他模块</p></blockquote><h3 id="区别五"><a href="#区别五" class="headerlink" title="区别五"></a>区别五</h3><blockquote><p>全局对象不同：浏览器环境中，全局对象是 window，它提供了浏览器相关的功能和属性。而在 Node.js 环境中，全局对象是 global，它提供了与 Node.js 相关的功能和属性。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>node环境可以用来开发后端，就是如果当你需要一个后台用来处理前端请求，而又不会其他后端语言如java，python，这时候就可以使用node.js来写后端</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;区别一&quot;&gt;&lt;a href=&quot;#区别一&quot; class=&quot;headerlink&quot; title=&quot;区别一&quot;&gt;&lt;/a&gt;区别一&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;二者的方向不同，浏览器环境主要是用于客户端，node 环境主要是用于服务端(后端)&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="前端" scheme="https://xi-zhi.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="node.js" scheme="https://xi-zhi.xyz/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>基于three.js与浏览器环境实现粒子特效</title>
    <link href="https://xi-zhi.xyz/posts/e618e1da.html"/>
    <id>https://xi-zhi.xyz/posts/e618e1da.html</id>
    <published>2023-05-30T03:56:42.998Z</published>
    <updated>2023-05-30T03:56:42.998Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前阵子学习了-three-js-发现它是真的强大-可以实现各种各样的-3d-功能-然后自己试着做了一个基于-three-js-粒子系统的一个粒子特效"><a href="#前阵子学习了-three-js-发现它是真的强大-可以实现各种各样的-3d-功能-然后自己试着做了一个基于-three-js-粒子系统的一个粒子特效" class="headerlink" title="前阵子学习了 three.js,发现它是真的强大,可以实现各种各样的 3d 功能,然后自己试着做了一个基于 three.js 粒子系统的一个粒子特效"></a>前阵子学习了 three.js,发现它是真的强大,可以实现各种各样的 3d 功能,然后自己试着做了一个基于 three.js 粒子系统的一个粒子特效</h5><ol><li>你得先有一个编译器,使用 idea 或者是 vscode 都可以的</li><li>创建一个 html 文件</li><li><p>引入 three.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/three@latest/build/three.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入 gsap 这个动画库(也可以不使用，通过使用原生的动画进行实现，只是有这个库的话实现起来更简单，有兴趣的可以去了解一下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>开工!</p><ul><li>创建场景<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br></pre></td></tr></table></figure></li><li>创建相机<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">  <span class="number">75</span>,</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">  <span class="number">0.1</span>,</span><br><span class="line">  <span class="number">10000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>创建渲染器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br></pre></td></tr></table></figure></li><li>创建动画函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>开始创建粒子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="number">1000</span>; <span class="comment">//粒子的数量</span></span><br><span class="line"><span class="keyword">const</span> positions = <span class="keyword">new</span> <span class="title class_">Float32Array</span>((count * <span class="number">3</span>) / <span class="number">10</span>); <span class="comment">//粒子的位置属性</span></span><br><span class="line"><span class="keyword">const</span> colors = <span class="keyword">new</span> <span class="title class_">Float32Array</span>((count * <span class="number">3</span>) / <span class="number">10</span>); <span class="comment">//粒子的颜色属性</span></span><br><span class="line"><span class="keyword">const</span> particleGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferGeometry</span>(); <span class="comment">//粒子的网格</span></span><br><span class="line"><span class="comment">//粒子的材质</span></span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">depthWrite</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">blending</span>: <span class="variable constant_">THREE</span>.<span class="property">AdditiveBlending</span>,</span><br><span class="line">  <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">vertexColors</span>: <span class="literal">true</span>, <span class="comment">//设置顶点的颜色</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 初始化粒子的位置和颜色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (count / <span class="number">10</span>) * <span class="number">3</span>; j++) &#123;</span><br><span class="line">  positions[j * <span class="number">3</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1500</span> - <span class="number">750</span>;</span><br><span class="line">  positions[j * <span class="number">3</span> + <span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1500</span> - <span class="number">750</span>;</span><br><span class="line">  positions[j * <span class="number">3</span> + <span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span> - <span class="number">500</span>;</span><br><span class="line">  colors[j * <span class="number">3</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  colors[j * <span class="number">3</span> + <span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  colors[j * <span class="number">3</span> + <span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置粒子的位置属性</span></span><br><span class="line">particleGeometry.<span class="title function_">setAttribute</span>(</span><br><span class="line">  <span class="string">&quot;position&quot;</span>,</span><br><span class="line">  <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(positions, <span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 设置粒子的颜色属性</span></span><br><span class="line">particleGeometry.<span class="title function_">setAttribute</span>(<span class="string">&quot;color&quot;</span>, <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(colors, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// 创建粒子</span></span><br><span class="line"><span class="keyword">const</span> points = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(particleGeometry, material);</span><br></pre></td></tr></table></figure></li><li>为粒子添加动画(使用 gsap)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gsap.<span class="title function_">to</span>(points.<span class="property">position</span>, &#123;</span><br><span class="line">  <span class="attr">z</span>: -<span class="number">800</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5</span> + <span class="number">5</span>,</span><br><span class="line">  <span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>将粒子添加到场景中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.<span class="title function_">add</span>(points);</span><br></pre></td></tr></table></figure></li><li>效果预览<br><img src="/img/categories/前端/three/pre.gif"></li><li>这样我们的粒子特效就算完成了，但是聪明的你很快就能发现上面的粒子有点别扭，因为上面的代码是为整个粒子系统设置的动画，所以事实上我们看到的粒子移动是整个粒子系统在移动，当它完成了它的动画就会一瞬间回到原来的位置，然后就会有一点视觉上的突兀，那么如何解决这个问题呢？</li></ul></li><li>进一步改进<ul><li>把所有的粒子分散到多个粒子系统<br>我们把所有粒子分成 10 个粒子系统，这样的话每个系统里面就包含了 100 和粒子，然后分别添加动画，并初始化不同的位置，这样的话就会大幅减少视觉上的突兀，话不多说，开始动手!<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> positions = <span class="keyword">new</span> <span class="title class_">Float32Array</span>((count * <span class="number">3</span>) / <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> colors = <span class="keyword">new</span> <span class="title class_">Float32Array</span>((count * <span class="number">3</span>) / <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">const</span> particleGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferGeometry</span>();</span><br><span class="line">  <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">size</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">depthWrite</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">blending</span>: <span class="variable constant_">THREE</span>.<span class="property">AdditiveBlending</span>,</span><br><span class="line">    <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">vertexColors</span>: <span class="literal">true</span>, <span class="comment">//设置顶点的颜色</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (count / <span class="number">10</span>) * <span class="number">3</span>; j++) &#123;</span><br><span class="line">    positions[j * <span class="number">3</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1500</span> - <span class="number">750</span>;</span><br><span class="line">    positions[j * <span class="number">3</span> + <span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1500</span> - <span class="number">750</span>;</span><br><span class="line">    positions[j * <span class="number">3</span> + <span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span> - <span class="number">500</span>;</span><br><span class="line">    colors[j * <span class="number">3</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    colors[j * <span class="number">3</span> + <span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    colors[j * <span class="number">3</span> + <span class="number">2</span>] = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  particleGeometry.<span class="title function_">setAttribute</span>(</span><br><span class="line">    <span class="string">&quot;position&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(positions, <span class="number">3</span>)</span><br><span class="line">  );</span><br><span class="line">  particleGeometry.<span class="title function_">setAttribute</span>(</span><br><span class="line">    <span class="string">&quot;color&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(colors, <span class="number">3</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> points = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(particleGeometry, material);</span><br><span class="line">  scene.<span class="title function_">add</span>(points);</span><br><span class="line"></span><br><span class="line">  gsap.<span class="title function_">to</span>(points.<span class="property">position</span>, &#123;</span><br><span class="line">    <span class="attr">z</span>: -<span class="number">800</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5</span> + <span class="number">5</span>,</span><br><span class="line">    <span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">ease</span>: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>效果预览<br><img src="/img/categories/前端/three/pre_final.gif"><br>但是这样的话我们会发现每一个粒子都太单调了，虽然有颜色，但是都是正方形，那么如何设置成自己喜欢的粒子呢？</li><li>给粒子添加纹理<br>准备好你的纹理，其实就是一张图片，jpg，png 等格式都可以，可以直接去网上扒，也可以使用我的 <a href="/img/categories/前端/three/particle.png" download="particle.png" target="_blank">点击下载</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&quot;./particle.png&quot;</span>);</span><br></pre></td></tr></table></figure>为粒子材质设置纹理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">map</span>: texture, <span class="comment">//纹理</span></span><br><span class="line">  <span class="attr">alphaMap</span>: texture, <span class="comment">//透明纹理</span></span><br><span class="line">  <span class="attr">size</span>: <span class="number">5</span>, <span class="comment">//粒子大小</span></span><br><span class="line">  <span class="attr">depthWrite</span>: <span class="literal">false</span>, <span class="comment">//是否开启深度描写</span></span><br><span class="line">  <span class="attr">blending</span>: <span class="variable constant_">THREE</span>.<span class="property">AdditiveBlending</span>, <span class="comment">//混合模式</span></span><br><span class="line">  <span class="attr">transparent</span>: <span class="literal">false</span>, <span class="comment">//是否透明</span></span><br><span class="line">  <span class="attr">vertexColors</span>: <span class="literal">true</span>, <span class="comment">//设置顶点的颜色</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>效果预览</li><li>完整代码</li></ul></li><li>尾声<ul><li>弊端<br>我这里是使用了多个粒子系统来解决突兀问题，其实这种方式是不可取的，因为使用多个粒子系统会导致浏览器卡死，总是就是会消耗很多性能，如果想要解决突兀问题的话，可以考虑为每一个粒子添加单独的动画，而不是更改粒子系统的位置，每次当粒子到达目标位置的时候就马上回到原来到位置</li><li>改进方向<br>其实还有很多可以改进的地方，比如粒子的初始位置，还可以更加细化一些，还有就是可以设置粒子运动轨迹，让它不只是改变z轴的方向，让它的轨迹更加自由</li><li>心声<br>首先感谢各位旅人阅读我的文章，如果有更加好的想法或者是遇到了问题欢迎与我交流</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;前阵子学习了-three-js-发现它是真的强大-可以实现各种各样的-3d-功能-然后自己试着做了一个基于-three-js-粒子系统的一个粒子特效&quot;&gt;&lt;a href=&quot;#前阵子学习了-three-js-发现它是真的强大-可以实现各种各样的-3d-功能-然后自己试</summary>
      
    
    
    
    <category term="前端" scheme="https://xi-zhi.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="three.js" scheme="https://xi-zhi.xyz/tags/three-js/"/>
    
    <category term="javascript" scheme="https://xi-zhi.xyz/tags/javascript/"/>
    
    <category term="particleEffect" scheme="https://xi-zhi.xyz/tags/particleEffect/"/>
    
  </entry>
  
  <entry>
    <title>基于three.js实现VR看房效果</title>
    <link href="https://xi-zhi.xyz/posts/0.html"/>
    <id>https://xi-zhi.xyz/posts/0.html</id>
    <published>2023-05-30T03:56:42.998Z</published>
    <updated>2023-05-30T03:56:42.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化一个-vue-项目-这里是基于-vue-环境来快速搭建"><a href="#初始化一个-vue-项目-这里是基于-vue-环境来快速搭建" class="headerlink" title="初始化一个 vue 项目(这里是基于 vue 环境来快速搭建)"></a>初始化一个 vue 项目(这里是基于 vue 环境来快速搭建)</h3><blockquote><p>关于环境说明：浏览器环境和 vue 环境都可以，只是用 vue 开发会更加便利，前提是得安装 node.js<br>打开终端，windows 用户 win + R 输入 cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p>然后会要你填项目的名字，输入完之后一路按回车就好，然后分别执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;你的项目&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>之后 vue 会在你电脑上开启一个小型服务器，你可以直接在浏览器网址栏通过输入 localhost:5173 访问它，这样你的项目就初始化好了<br>然后按 ctrl + c 退出服务器<br>然后记得将你的 vue 项目再次初始化(就是把不需要的东西都删了)</p></blockquote><h3 id="下载-three-js"><a href="#下载-three-js" class="headerlink" title="下载 three.js"></a>下载 three.js</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install three</span><br></pre></td></tr></table></figure></blockquote><h3 id="在-App-vue-文件里面初始化-three-js-的基本配置-这里采用-setup-响应式声明的方式"><a href="#在-App-vue-文件里面初始化-three-js-的基本配置-这里采用-setup-响应式声明的方式" class="headerlink" title="在 App.vue 文件里面初始化 three.js 的基本配置(这里采用 setup 响应式声明的方式)"></a>在 App.vue 文件里面初始化 three.js 的基本配置(这里采用 setup 响应式声明的方式)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">//导入three</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span>;</span><br><span class="line"><span class="comment">//添加控制器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span>;</span><br><span class="line"><span class="comment">//引入挂载钩子函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//场景的初始化</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"><span class="comment">//初始化相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">  <span class="number">75</span>,</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">  <span class="number">0.1</span>,</span><br><span class="line">  <span class="number">1000</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//设置相机的位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">//初始化渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"><span class="comment">//初始化控制器</span></span><br><span class="line"><span class="keyword">const</span> orbitControls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">orbitControls.<span class="property">enableDamping</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//渲染函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">  orbitControls.<span class="title function_">update</span>();</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="开始加载场景-准备好一张hdr全景图或者是-6-张全方位图-可以网上扒，没有的话可以使用我的-点击下载全景图"><a href="#开始加载场景-准备好一张hdr全景图或者是-6-张全方位图-可以网上扒，没有的话可以使用我的-点击下载全景图" class="headerlink" title="开始加载场景(准备好一张hdr全景图或者是 6 张全方位图)可以网上扒，没有的话可以使用我的 点击下载全景图"></a>开始加载场景(准备好一张hdr全景图或者是 6 张全方位图)可以网上扒，没有的话可以使用我的 <a href="https://xizhi-picgo.oss-cn-guangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF/vr%E7%9C%8B%E6%88%BF/BrightMichiganFunRoom.hdr" download="BrightMichiganFunRoom.hdr" target="_blank">点击下载全景图</a></h3><p>在上面的代码的基础上添加下面的代码(import导入代码放在头部)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入加载器，用来加载图片</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RGBELoader</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/loaders/RGBELoader&quot;</span>;</span><br><span class="line"><span class="comment">//添加球  HDR全景展示</span></span><br><span class="line"><span class="comment">// 5代表半径，32代表顶点数量</span></span><br><span class="line"><span class="keyword">const</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">5</span>, <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">// 初始化加载器</span></span><br><span class="line"><span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="title class_">RGBELoader</span>();</span><br><span class="line"><span class="comment">// 加载全景图</span></span><br><span class="line">loader.<span class="title function_">load</span>(<span class="string">&quot;./imgs/BrightMichiganFunRoom.hdr&quot;</span>, <span class="function">(<span class="params">texture</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建球的材质并设置纹理</span></span><br><span class="line">  <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">map</span>: texture,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 创建球</span></span><br><span class="line">  <span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry, material);</span><br><span class="line">  <span class="comment">// 设置z轴方向缩放为-1是为了让全景图展示在球的内部，不然的话全景图就会展示在球的表面</span></span><br><span class="line">  sphere.<span class="property">geometry</span>.<span class="title function_">scale</span>(<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 添加球</span></span><br><span class="line">  scene.<span class="title function_">add</span>(sphere);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="进入终端，输入下面命令查看效果"><a href="#进入终端，输入下面命令查看效果" class="headerlink" title="进入终端，输入下面命令查看效果"></a>进入终端，输入下面命令查看效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="https://xizhi-picgo.oss-cn-guangzhou.aliyuncs.com/vrkanfang.gif"></p><h3 id="全局代码"><a href="#全局代码" class="headerlink" title="全局代码"></a>全局代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="comment">//导入three</span></span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">RGBELoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/loaders/RGBELoader&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加控制器</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/controls/OrbitControls&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//场景的初始化</span></span><br><span class="line">  <span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line">  <span class="comment">//初始化相机</span></span><br><span class="line">  <span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">//设置相机的位置</span></span><br><span class="line">  camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化渲染器</span></span><br><span class="line">  <span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line">  renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> orbitControls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">  orbitControls.<span class="property">enableDamping</span> = <span class="literal">true</span>;;</span><br><span class="line">  <span class="comment">//渲染函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//渲染器渲染</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">    <span class="comment">//控制器更新</span></span><br><span class="line">    orbitControls.<span class="title function_">update</span>();</span><br><span class="line">    <span class="comment">//浏览器渲染函数</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//挂载完毕后调用</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line">    <span class="comment">//执行渲染函数</span></span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里是使用6张全方位图的方式</span></span><br><span class="line">  <span class="comment">//添加立方体  VR看房</span></span><br><span class="line">  <span class="comment">// const boxGeometry = new THREE.BoxGeometry(10, 10, 10);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// let arr = [&#x27;l&#x27;, &#x27;r&#x27;, &#x27;u&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;f&#x27;];</span></span><br><span class="line">  <span class="comment">// let boxMaterials = [];</span></span><br><span class="line">  <span class="comment">// arr.forEach((item) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   //纹理加载</span></span><br><span class="line">  <span class="comment">//   let texture = new THREE.TextureLoader().load(`./imgs/$&#123;item&#125;.jpg`);</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//   if(item === &#x27;u&#x27; || item === &#x27;d&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//     texture.rotation = Math.PI;</span></span><br><span class="line">  <span class="comment">//     texture.center.set(0.5, 0.5);</span></span><br><span class="line">  <span class="comment">//     boxMaterials.push(new THREE.MeshBasicMaterial(&#123;</span></span><br><span class="line">  <span class="comment">//       map: texture</span></span><br><span class="line">  <span class="comment">//     &#125;));</span></span><br><span class="line">  <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     boxMaterials.push(new THREE.MeshBasicMaterial(&#123;</span></span><br><span class="line">  <span class="comment">//       map: texture</span></span><br><span class="line">  <span class="comment">//     &#125;));</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="comment">// const cube = new THREE.Mesh(boxGeometry, boxMaterials);</span></span><br><span class="line">  <span class="comment">// cube.geometry.scale(1, 1, -1);</span></span><br><span class="line">  <span class="comment">// scene.add(cube);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加球  HDR全景展示</span></span><br><span class="line">  <span class="keyword">const</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">5</span>, <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="title class_">RGBELoader</span>();</span><br><span class="line">  loader.<span class="title function_">load</span>(<span class="string">&#x27;./imgs/BrightMichiganFunRoom.hdr&#x27;</span>, <span class="function">(<span class="params">texture</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">      <span class="attr">map</span>: texture</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry, material);</span><br><span class="line">    sphere.<span class="property">geometry</span>.<span class="title function_">scale</span>(<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    scene.<span class="title function_">add</span>(sphere);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  * &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初始化一个-vue-项目-这里是基于-vue-环境来快速搭建&quot;&gt;&lt;a href=&quot;#初始化一个-vue-项目-这里是基于-vue-环境来快速搭建&quot; class=&quot;headerlink&quot; title=&quot;初始化一个 vue 项目(这里是基于 vue 环境来快速搭建)&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://xi-zhi.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="three.js" scheme="https://xi-zhi.xyz/tags/three-js/"/>
    
    <category term="VR" scheme="https://xi-zhi.xyz/tags/VR/"/>
    
  </entry>
  
  <entry>
    <title>我的个人博客！</title>
    <link href="https://xi-zhi.xyz/posts/9520.html"/>
    <id>https://xi-zhi.xyz/posts/9520.html</id>
    <published>2023-05-23T15:57:50.000Z</published>
    <updated>2023-05-30T03:56:42.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从-hexo-框架开始"><a href="#从-hexo-框架开始" class="headerlink" title="从 hexo 框架开始"></a>从 hexo 框架开始</h1><blockquote><p>曾经一直想着拥有自己的博客，现在终于实现了，一开始是想着学了 vue 和 springboot 两个框架后，自己搭建一个博客，但是写着写着发现效率好低，做着很多重复性工作(才不是我的代码封装性不好)，总之就是想写好的话需要很久的时间，因为样式、脚本、字体等等都要自己弄，终究是以失败告终，后来问 chat 才发现原来有现成的博客框架 hexo，当知道这点的时候可开心了，马上就去了解这个框架，这个框架用起来倒是不难，大部分博客该有的功能都帮我实现了，但是我要的是一个个性化的博客，我想要随意的改变我博客的每一个地方，然后发现 hexo 有很多的主题，于是…</p></blockquote><hr><h1 id="主题选择之旅"><a href="#主题选择之旅" class="headerlink" title="主题选择之旅"></a>主题选择之旅</h1><blockquote><p>于是又开启主题学习之旅，但是主题的选择又成为了一个难题，于是我上网看了大部分人所使用的主题，有一个 Aurora 主题我挺喜欢的，一个极光主题，很有科技感和未来感，不过看起来太花哨了，色彩很重，我想要我的博客色彩淡一些，于是选择了 butterfly 主题，这个主题网上有教程，所以学习起来不是很难，我很快就配置好了这个主题，但是新的问题又来了…</p></blockquote><h1 id="开始魔改"><a href="#开始魔改" class="headerlink" title="开始魔改"></a>开始魔改</h1><blockquote><p>虽然是使用了一个主题，但是这个主题毕竟还是别人的，总有地方是自己还想要进一步改造的，所以需要对主题进行魔改，这个 b 站上有教程，一开始是跟着安知鱼这个博主进行修改的，整个过程还是比较简单轻松的，很快就改造的有模有样了，但是终究是跟着别人改的，还不会自己改，所以我又开始研究如何自己魔改，然后研究了一下主题的源代码，发现…</p></blockquote><h1 id="自己魔改"><a href="#自己魔改" class="headerlink" title="自己魔改"></a>自己魔改</h1><blockquote><p>我发现原来魔改好简单，一开始看到.pug 和.styl 文件我还以为是我不熟悉的语言写的文件，然后仔细一看.pug 文件不就是简单版的 html 文件吗，.styl 文件就是简单版的 css 文件，岂可修！！！搞得我还以为我要学习新的语言，除了语法有点区别外其他基本一样，所以我很快就上手了自己魔改。其实魔改挺有意思的，我现在有点乐在其中了哈哈</p></blockquote><h1 id="学习收获"><a href="#学习收获" class="headerlink" title="学习收获"></a>学习收获</h1><blockquote><p>这次博客搭建学到了挺多的东西，比如我只知道 css 可以定义变量，却不知道具体该怎么使用，现在对变量声明和使用都熟悉了，然后就是学习到了很多新的插件和新的思维方式与概念，还认识到了很多优秀的博主，了解到了更多工具网站，比如制作徽标，icon 等等</p></blockquote><h1 id="心声"><a href="#心声" class="headerlink" title="心声"></a>心声</h1><blockquote><p>这个博客承载着我的热爱与热情，这个博客会见证我的成长，我也会见证这个博客的成长，另外我搭建这个博客的原因有很多，一是自己真的想要一个博客用来分享自己的学习成果，自己的生活，记录自己的成长轨迹，二是想结交更多朋友，想认识更多来自互联网的旅人，与我一起交流，不仅仅是编程，还有生活琐事，三是想在这互联网上搭建一个栖息的地方，供互联网中的旅人休息，同时也是想在互联网中留下自己的足迹，四是我生日快到了哈哈，我想为 19 岁的我送上一份最棒的生日礼物，18 岁的我实现了高中的梦想——成为一名程序员！我那时候的高中生活是很无趣的，每天就是写作业，考试，吃饭睡觉，每天重复着无趣的活动，直到遇到了编程，我的世界变得有趣起来，所以开始下定决心要成为一名程序员！高考结束后我立马就开始投入了编程的学习，那真是一段非常充实的时光，我的世界也变得丰富多彩起来！到现在接触编程已经快一年了，能自己写出不错的东西了，但是我的征程还才开始，后面还有很长一段征程要走，所以我希望 19 岁的我能保持我 18 岁的热情，让心永远向阳、不忘初心、不停留在过往、以风为方向勇往直前！保持那个斗志昂扬不认输的我！有梦埋在心底，为实现至死不渝！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从-hexo-框架开始&quot;&gt;&lt;a href=&quot;#从-hexo-框架开始&quot; class=&quot;headerlink&quot; title=&quot;从 hexo 框架开始&quot;&gt;&lt;/a&gt;从 hexo 框架开始&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;曾经一直想着拥有自己的博客，现在终于实现了</summary>
      
    
    
    
    <category term="生活" scheme="https://xi-zhi.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://xi-zhi.xyz/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="hexo" scheme="https://xi-zhi.xyz/tags/hexo/"/>
    
    <category term="blog" scheme="https://xi-zhi.xyz/tags/blog/"/>
    
  </entry>
  
</feed>
